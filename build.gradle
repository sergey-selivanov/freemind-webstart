/**
 * To properly substitute options, invoke specifying target environment: -PenvironmentName=mistral
 *
 * To make release and increase version, set stage final:
 *
 * gradle release -Prelease.scope=patch -Prelease.stage=final
 * gradle release -Prelease.scope=minor -Prelease.stage=final
 * gradle release -Prelease.scope=major -Prelease.stage=final
 *
 * The change scope can be either MAJOR, MINOR, or PATCH
 * The stage of the change corresponds to the development stage (such as dev, milestone, rc, final)
 */

buildscript {
    repositories {
        maven {
            url "${artifactory_contextUrl}/libs-release"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.4.2'
        classpath 'net.saliman:gradle-properties-plugin:1.4.5'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'org.ajoberstar.release-opinion'
apply plugin: 'net.saliman.properties'

import org.ajoberstar.grgit.Grgit

ext.repo = Grgit.open(project.file('.'))

//version = '432'
sourceCompatibility = 1.6
targetCompatibility = 1.6
mainClassName = 'org.sergeys.fmws.FreemindWebstart'

ext.freemindDir = 'c:/bin/freemind-bin-max-1.0.1'
ext.buildWebstartDir = 'build/webstart'
//ext.webstartBaseUrl = 'http://svs.bugz.org.ua/freemind'


repositories {
    mavenCentral()
}

dependencies {
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.5'
    compile 'org.apache.logging.log4j:log4j-core:2.5'

    compile files("${freemindDir}/lib/freemind.jar")
}

release {
    grgit = repo
}


// https://github.com/gmateo/gradle-webstart-example/blob/master/build.gradle

jar {
    manifest {
        attributes 'Implementation-Title': 'FreeMind 1.0.1',
            'Implementation-Version': version.toString(),
            'Permissions': 'all-permissions',
            'Application-Name': 'FreeMind 1.0.1'
    }
}

task copyJars(type: Copy, dependsOn: [jar]) {
    from configurations.runtime
    from("build/libs")
    into("$buildWebstartDir/lib")
    include('*.jar')
}

task copyFiles(type: Copy) {
//    from("src/main/webstart")
//    into("$buildWebstartDir/signed")
//    include('*.png')
    //from("src/main/resources")

    // only copies icon

    from("src/main/resources/images")
    into("$buildWebstartDir/signed")
    include('**/*.png')

}

task copyFreemindJars(type: Copy) {
    from("$freemindDir/lib")
    from("$freemindDir/lib/jibx")
    from("$freemindDir/lib/SimplyHTML")
    into("$buildWebstartDir/lib")
    //include('**/*.jar')
    include('*.jar')
}

task packFreemindHome(type: Jar){

    archiveName 'freemind-home.jar'
    destinationDir file('build/tmp')
    from("$freemindDir")
    exclude('*.bat', '*.exe', '*.sh', 'browser', 'lib')
}

task createKey{

    File ksfile = new File('src/main/webstart/.keystore')
    if(!ksfile.isFile()){
        ant.genkey(
            keystore: 'src/main/webstart/.keystore',
            storepass: 'password',
            alias: 'sergey.selivanov',
            validity: 365
            ){
            dname{
                param(name: 'CN', value: 'Common Name')
                param(name: 'OU', value: 'Org Unit')
                param(name: 'O', value: 'Org')
                param(name: 'C', value: 'UA')
                param(name: 'L', value: 'Location')
            }
        }
    }
}


task signAll(dependsOn: [copyJars, copyFreemindJars, createKey]) << {
    new File("$buildWebstartDir/signed").mkdirs()
    def libFiles = files { file("$buildWebstartDir/lib").listFiles() }
    libFiles.each {
        ant.signjar(
                destDir: "${buildWebstartDir}/signed",
                alias: 'sergey.selivanov',
                jar: it,
                keystore: 'src/main/webstart/.keystore',
                storepass: 'password',
                preservelastmodified: 'true')
    }
}

task generateJnlp(dependsOn: [signAll, copyFiles]) << {

    File jnlpTemplateFile = new File('src/main/webstart/jnlp-template.xml')
    def root = new XmlParser().parse(jnlpTemplateFile)
    def jnlpFileName = "freemind.jnlp"

    root.@codebase = project.filterTokens.'webstartBaseUrl'
    root.@href = jnlpFileName

    def information = root.information[0]

    def icon = information.icon[0]
    icon.@href = project.filterTokens.'webstartBaseUrl' + '/FreeMind-256.png'


    def resource = root.resources[0]

    def collection = files { file("${buildWebstartDir}/lib").listFiles() }
    def mainJar = "freemind-webstart-${version}.jar"
    collection.each {
        def resourceValues = [href: it.name]

        //    println it.name + ' - ' + mainJar

        if (mainJar == it.name) {
            resourceValues = [href: it.name, main: 'true']
        }
        resource.appendNode('jar', resourceValues)
    }

    // Setting the main class
    def applicationDesc = root.'application-desc'[0]
    applicationDesc.'@main-class' = mainClassName

    // Writing the jnlp file filled
    File jnlpFile = new File("${buildWebstartDir}/signed/" + jnlpFileName)

    def prn = new XmlNodePrinter(new PrintWriter(jnlpFile))
    prn.setPreserveWhitespace(true)
    prn.print(root)
}


task webstart (dependsOn: [generateJnlp])<< {
    println("Generating all webstart files in ${buildWebstartDir}/signed")
}

jar{
    dependsOn packFreemindHome
    //source files {file("build/libs/freemind-home.jar")}
    from "build/tmp/freemind-home.jar"
}
